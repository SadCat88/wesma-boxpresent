// =============================================================================
// =============================================================================
// 
// === Liba Biba Pupa Lupa
// 
// =============================================================================
// =============================================================================



// =============================================================================
// === variables
// =============================================================================
$debug: false;
// режим debug - визуальное отображение сетки
// .l-container - красный
// .l-row - зеленый
// .l-col - синий

$container-width: 1560px;
// максимальная ширина контейнера в десктопе
$screen-min-padding: 5vw;
// минимальная ширина внутренних отступов от краев экрана в [x]vw
// по горизонтали

$qty-columns: null;
// количество колонок в ряду сетки в штуках (по умолчанию 12)

$gutter: 22px;
// промежуток между колонками в потоке (по умолчанию по горизонтали)
// для правильных расчетов должно быть четным

$gutter-cross: null;
// промежуток между колонками в px поперек потока (по умолчанию по вертикали)
// если значение не указано, то $gutter-cross = $gutter
// для правильных расчетов должно быть четным

$break-points: 'a'992px,
'b'562px,
'c'440px;
// адаптивные точки

// === default variables
$gutter-cross: null !default;
$gutter-cross: if($gutter-cross==null, $gutter, $gutter-cross);

$qty-columns: 12 !default;

// =============================================================================
// === layout
// =============================================================================
.l-container {
  width: 100%;
  max-width: calc(#{$container-width} + #{$screen-min-padding} * 2);
  margin: 0 auto;
  padding: 0 $screen-min-padding;

// === модификаторов у контейнера быть не может!
// по умолчанию ожидается что .l-row занимает всю ширину .l-container
// для организации внутреннего контента в строки или колонки необходимо
// использовать обертки для них
// 
// если надо организовать .l-row как один из элементов одной строки,
// то это необходимо делать кастомными стилями, 
// т.к. универсального решения для всех таких случаев продумать заранее нельзя
// 
}

.l-row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -($gutter / 2);
  width: calc(100% + #{$gutter});
  margin-bottom: -$gutter-cross;
}

// === Основа для колонки
div[class^='l-col-'] {
  flex-shrink: 0;

  display: flex;

  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  margin-bottom: $gutter-cross;
}

.l-col-min {
  width: auto;
}

.l-col-max {
  width: 100%;
}

.--offset-left-none {
  margin-left: 0;
}

.--offset-right-none {
  margin-right: 0;
}

// === === === generators
$index: 1;

// === === desktop things
@while $index <=$qty-columns {

  $selector: if($index <=9, '-0', '-');

  // === columns
  .l-col#{$selector}#{$index} {
    width: ((100% / $qty-columns) * $index);
    width: calc((100% / #{$qty-columns}) * #{$index});
  }

  // // === пример расчета
  // .l-col-02 {
  //   width: ((100% / 12) * 2);
  //   width: calc((100% / 12) * 2);
  // }

  // === offsets
  @each $name in 'left',
  'right' {
    .--offset-#{$name}#{$selector}#{$index} {
      margin-#{$name}: ((100% / $qty-columns) * #{$index});
      margin-#{$name}: calc((100% / #{$qty-columns}) * #{$index});
    }
  }

  // // === пример расчета
  // .--offset-right-01 {
  //   margin-right: ((100% / 12) * 1);
  //   margin-right: calc((100% / 12) * 1);
  // }

  $index: $index+1;
}


// === === breakpoint adaptive modifiers
@each $key,
$value in $break-points {
  @media (max-width: #{$value}) {
    @for $i from 1 through $qty-columns {
      $selector: if($i <=9, '-0', '-');

      // === columns adaptive
      .--col-#{$key}#{$selector}#{$i} {
        width: ((100% / $qty-columns) * $i);
        width: calc((100% / #{$qty-columns}) * #{$i});
      }

      // // === пример расчета
      // @media (max-width: 992px) {
      //   .--av-a-06 {
      //     width: ((100% / 12) * 6);
      //     width: calc((100% / 12) * 6);
      //   }
      // }

      // === offsets adaptive
      .--offset-left-a-01 {}

      @each $name in 'left',
      'right' {
        .--offset-#{$name}-#{$key}#{$selector}#{$i} {
          margin-#{$name}: ((100% / $qty-columns) * #{$i});
          margin-#{$name}: calc((100% / #{$qty-columns}) * #{$i});
        }
      }
    }
  }
}



// === modifiers

// === === модификаторы колонки
// === .--content-left 
// выравнивает контент внутри колонки
.--content-left {
  justify-content: flex-start;
}

.--content-center {
  justify-content: center;
}

.--content-right {
  justify-content: flex-end;
}

.--content-top {
  align-items: flex-start;
}

.--content-middle {
  align-items: center;
}

.--content-bottom {
  align-items: flex-end;
}

// === === модификаторы строки
// === .--col-top
// выравнивает колонки внутри строки

.--col-top {
  align-items: flex-start;
}

.--col-middle {
  align-items: center;
}

.--col-bottom {
  align-items: flex-end;
}

.--col-left {
  justify-content: flex-start;
}

.--col-center {
  justify-content: center;
}

.--col-right {
  justify-content: flex-end;
}

// === === модификаторы строки
// === .--justify-around
// выравнивает колонки внутри строки

.--justify-between {
  justify-content: space-between;
}

.--justify-around {
  justify-content: space-around;
}

.--justify-evenly {
  justify-content: space-evenly;
}

.--self-top {
  align-self: flex-start;
}

.--self-middle {
  align-self: center;
}

.--self-bottom {
  align-self: flex-end;
}


// === debug zone
@if ($debug==true) {
  body {
    &::before {
      content: 'debug режим';
      position: absolute;
      z-index: 1999;
      right: 0;
      top: calc(100vh - 5.6em);
      padding: 0.2em 0.4em 0.3em;
      width: 11em;
      height: 1.5em;

      font-size: 11px;
      line-height: 1.2;

      border-radius: 6px 6px 0 0;
      background-color: red;
      opacity: 0.6;
    }

    &::after {
      content: '.l-container - красный,\0a .l-row - зеленый,\0a .l-col - синий';
      position: absolute;
      right: 0;
      top: calc(100vh - 4.1em);
      padding: 0.2em 0.4em 0.3em;
      width: 11em;
      height: 4.1em;

      line-height: 1.2;
      font-size: 11px;

      background-color: #ffcbcb;
      border-radius: 0 0 6px 6px;
      white-space: pre;
      opacity: 0.6;
    }
  }

  .l-container {
    position: relative;
    z-index: 1;

    &::before {
      content: '';
      position: absolute;
      left: $screen-min-padding;
      right: $screen-min-padding;
      top: 0;
      bottom: 0;
      // bottom: $gutter-cross;
      z-index: -1;

      outline: 1px solid #ff0000;
      background-color: #ffcbcb;
      outline-offset: -1px;
    }
  }

  .l-row {
    position: relative;
    z-index: 1;

    &::before {
      content: '';
      position: absolute;
      left: ($gutter / 2);
      right: ($gutter / 2);
      top: 0;
      bottom: 0;
      // bottom: $gutter-cross;
      z-index: -1;

      outline: 1px dashed #008000;
      background-color: #e8ffe8;
      outline-offset: -1px;
    }
  }

  div[class^='l-col-'] {
    position: relative;

    &::before {
      content: '';
      position: absolute;
      left: ($gutter / 2);
      right: ($gutter / 2);
      top: 0;
      bottom: 0;

      z-index: -1;

      outline: 1px dashed #0000ff;
      background-color: #e6e6ff;
      outline-offset: -1px;
    }
  }
}

.l-container.debug {
  position: relative;
  z-index: 1;

  &::before {
    content: '';
    position: absolute;
    left: $screen-min-padding;
    right: $screen-min-padding;
    top: 0;
    bottom: 0;
    // bottom: $gutter-cross;
    z-index: -1;

    outline: 1px solid #ff0000;
    background-color: #ffcbcb;
    outline-offset: -1px;
  }
}

// ===========================
.l-row p {
  width: 40%;
  height: 44px;
  outline: 1px dashed black;
  outline-offset: -1px;
  background-color: #a7a7a7;
}

.--h-100 {
  height: 100px;
}

.box {
  position: absolute;
  left: 50%;

  width: 500px;
  height: 500px;
  transform: translate(-50%);
  background: green;
}

// html {
//   &::after {
//     content: 'kek';
//   }
// }

.w50 {
  width: 50%;
  margin-left: 0;
}

div[class^='l-col-'].--collapse {
  padding-right: 0;
  margin-left: 0;
}

.l-row.--collapse {
  // margin-left: 0;

}

.mr {}

.l-wrap {
  width: 50%;
}